# 近观Shadow Dom
_2012-11-07 18:12_

今年6月份的时候，曾经翻译过一篇文章叫[《什么是Shadow Dom》](/article/what_is_shadow_dom.html)，这篇文章讲述了一种很让人兴奋的技术，它可以用于封装一些不受外界干扰的组件，也可以通过一个“洞”来做一些类似模板的工作，不过遗憾的是，作者写作文章的时候还没有浏览器实现这一功能，因此我们读完全文也无法直观地感受到它到底是一门怎么样的技术。

现在，[W3C关于Shadow Dom的草稿](http://www.w3.org/TR/2012/WD-shadow-dom-20121016/)已经在线上了（也可能早就在线上了，只是我最近才注意到……），chrome的canary版本也已经默认支持了Shadow Dom，因此我们有必要离近一些，从一个更接地气的角度来揭一揭这个家伙的神秘面纱。

$$solo_more$$

## 复习

简要回顾一下Shadow Dom的特性：

- 是DOM，具有DOM的属性、表现、方法、事件等
- 是DOM树，有结构
- 对JS免疫，无法从外部遍历内部结构
- 对CSS免疫，外部样式表不会影响内部样式
- 事件发生时，目标被标记为Shadow Dom的根节点

其实从这些角度来讲，Shadow DOM和伪元素还挺相似的。或者伪元素本身就是Shadow Dom？（有待证实。）
接下来，我们将依据W3C的草稿和chrome canary版本的实现来进一步了解Shadow Dom。

## 如何生成并挂接Shadow Dom

前面说过，Shadow Dom是一棵真实存在的DOM树，那么如何生成它呢？

首先需要了解一个概念叫Shadow Host，也就是在文档的DOM树中用于挂接Shadow Dom的节点。比如之前提到过的<input type="range" />就是一个Shadow Host，它用来挂接slider的一个滑槽和一个滑块。

当某个节点被指定为Shadow Host以后，它就成为一个很特殊的节点，即它既存在于文档的DOM树中，同时又成为了Shadow Dom的根节点（Shadow Root）。当页面渲染的时候，Shadow Host原来的内容将被整个Shadow Dom替换，因此，它会成为存在DOM结构中但不被渲染的元素（比如可怜的input，最终在渲染的时候被滑槽和滑块所代替）。

W3C的草稿中给出的概念图如下：

![W3C草稿中Shadow Dom概念图1](../images/a_closer_look_at_shadow_dom_1.png)

渲染之后的DOM树就像是这样子的：

![W3C草稿中Shadow Dom概念图2](../images/a_closer_look_at_shadow_dom_2.png)


